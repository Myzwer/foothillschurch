<?php

// Filter for generating the SEO description based on ACF content
add_filter( 'the_seo_framework_generated_description', 'prioritized_tsf_generated_description', 10, 2 );

/**
 * Filters the generated meta description for SEO by prioritizing specific ACF layout content.
 *
 * This function modifies the meta description generated by The SEO Framework plugin
 * to prioritize content from ACF Flexible Content fields in the following order:
 * - 'text_block'
 * - 'image_banner_text'
 * - 'information_section_block'
 * - 'blog_block'
 *
 * It checks each layout in the specified priority order and retrieves the text from
 * the 'text_editor' subfield of the first matching layout that contains content.
 *
 * @param string $desc The meta description generated by The SEO Framework plugin.
 * @param array|null $args Optional. The query arguments containing 'id', 'tax', 'pta', and 'uid'.
 *                         Null when the query is auto-determined.
 *
 * @return string The modified or original meta description.
 */
function prioritized_tsf_generated_description( string $desc, ?array $args ): string {
	// If ACF is not available, return the original meta description.
	if ( ! function_exists( 'get_field' ) ) {
		return $desc;
	}

	// Retrieve the current query object from The SEO Framework.
	$tsfquery = tsf()->query();
	$post_id  = $tsfquery->is_singular() ? $tsfquery->get_the_real_id() : null;

	// Proceed only if we have a valid post ID (i.e., on a single post or page).
	if ( ! empty( $post_id ) ) {
		// Retrieve the 'body_sections' ACF field for the post.
		$body_sections = get_field( 'body_sections', $post_id );

		// Define the priority order of layouts to search through.
		$priority_order = [
			'text_block',
			'image_banner_text',
			'information_section_block',
			'blog_block'
		];

		// Initialize an empty string to store the content if found.
		$editor_content = '';

		// Loop through the layouts in the priority order and search for content.
		foreach ( $priority_order as $layout_type ) {
			// Ensure we clear content on each iteration.
			$editor_content = '';

			// Check if body sections exist and are in an array format.
			if ( is_array( $body_sections ) ) {
				foreach ( $body_sections as $section ) {
					// If the layout matches the current priority, retrieve the content.
					if ( isset( $section['acf_fc_layout'] ) && $section['acf_fc_layout'] === $layout_type ) {
						$editor_content = $section['text_editor'] ?? ''; // Use null coalescing operator for safety.

						// Log the chosen layout and its content for debugging.
						error_log( "Using content from: $layout_type with content: $editor_content" );

						// If content is found, break out of both loops.
						if ( ! empty( $editor_content ) ) {
							break 2; // Break out of both the inner and outer loops.
						}
					}
				}
			}
		}

		// If content is found, clean and prepare it as the meta description.
		if ( ! empty( $editor_content ) ) {
			// Strip HTML tags for the meta description.
			$cleaned_content = wp_strip_all_tags( $editor_content );

			// Trim the description to a maximum of 159 characters.
			$desc = strlen( $cleaned_content ) > 159 ? substr( $cleaned_content, 0, 156 ) . '...' : $cleaned_content;
		}
	}

	// Return the modified or original meta description.
	return $desc;
}

// Filter for generating the SEO description for events
add_filter( 'the_seo_framework_generated_description', 'generate_event_meta_description', 10, 2 );

/**
 * Generates a meta description for the 'events' custom post type.
 *
 * This function modifies the SEO meta description for single 'events' posts by pulling content
 * from the ACF field 'main_details'. It sanitizes and cleans the content, removing any HTML tags,
 * and trims the resulting description to fit within 159 characters, ensuring it is suitable for SEO.
 *
 * @param string $desc The meta description generated by The SEO Framework plugin.
 * @param array|null $args Optional. The query arguments containing 'id', 'tax', 'pta', and 'uid'.
 *                         This parameter is null when the query is auto-determined.
 *
 * @return string The modified meta description based on the 'main_details' ACF field, or the original description if no valid content is found.
 */
function generate_event_meta_description( string $desc, ?array $args ): string {
	// Check if the current post type is 'event' before proceeding.
	if ( 'event' === get_post_type() ) {
		// Ensure that ACF is active and the 'get_field' function is available.
		if ( function_exists( 'get_field' ) ) {
			// Retrieve the value of the 'main_details' ACF field.
			$main_details = get_field( 'main_details' );

			// If the 'main_details' field contains content, clean and process it.
			if ( ! empty( $main_details ) ) {
				// Strip all HTML tags to prevent unwanted markup in the meta description.
				$cleaned_content = wp_strip_all_tags( $main_details );

				// If the content exceeds 159 characters, truncate and add an ellipsis.
				$desc = strlen( $cleaned_content ) > 159 ? substr( $cleaned_content, 0, 156 ) . '...' : $cleaned_content;
			}
		}
	}

	// Return the modified meta description or the original one if no valid content is found.
	return $desc;
}

// Filter for generating the SEO title for events
add_filter( 'the_seo_framework_title_from_generation', 'generate_event_meta_title', 10, 2 );

/**
 * Generates a meta title for the 'event' custom post type.
 *
 * This function modifies the SEO title for single 'event' posts by pulling the title
 * from the ACF field 'event_name'. It sanitizes the content by removing any HTML tags
 * and replaces the default SEO title with this custom title if available.
 *
 * @param string $title The generated title from The SEO Framework plugin.
 * @param array|null $args Optional. The query arguments containing 'id', 'tax', 'pta', and 'uid'.
 *                         This parameter is null when the query is auto-determined.
 *
 * @return string The modified meta title based on the 'event_name' ACF field, or the original title if no valid content is found.
 */
function generate_event_meta_title( string $title, ?array $args ): string {
	// Check if the current post type is 'event' before proceeding.
	if ( 'event' === get_post_type() ) {
		// Ensure that ACF is active and the 'get_field' function is available.
		if ( function_exists( 'get_field' ) ) {
			// Retrieve the value of the 'event_name' ACF field.
			$event_name = get_field( 'event_name' );

			// If the 'event_name' field contains content, use it as the SEO title.
			if ( ! empty( $event_name ) ) {
				// Strip any HTML tags from the content to sanitize the title.
				$title = wp_strip_all_tags( $event_name );
			}
		}
	}

	// Return the modified meta title or the original one if no valid content is found.
	return $title;
}


// Filter for generating social images for events
add_filter( 'the_seo_framework_image_generation_params', 'generate_event_social_image', 10, 2 );

/**
 * Custom image generation callback for the 'event' custom post type.
 *
 * This function modifies the social image generation for single 'event' posts. It checks
 * if the current page is a singular 'event' post and appends a custom image generator callback
 * to handle the social image based on the ACF field 'branding'.
 *
 * The function works both when the query is automatically determined and when it is passed as an argument.
 *
 * @param array $params The image generation parameters provided by The SEO Framework plugin.
 * @param array|null $args Optional. The query arguments containing 'id', 'tax', 'pta', and 'uid'.
 *                         When the query is auto-determined, this will be null.
 *
 * @return array The modified image generation parameters, including the custom image generator callback.
 */
function generate_event_social_image( array $params, ?array $args ): array {
	// If $args is null, check if we are on a singular 'event' post.
	if ( null === $args ) {
		if ( is_singular( 'event' ) ) {
			// Append the custom image generator callback for the 'event' post type.
			$params['cbs']['custom'] = 'my_tsf_custom_event_image_generator';
		}
	} else {
		// If $args is provided, check if the query is for a single 'event' post.
		if ( 'single' === The_SEO_Framework\get_query_type_from_args( $args ) && 'event' === get_post_type( $args['id'] ) ) {
			// Append the custom image generator callback for the 'event' post type.
			$params['cbs']['custom'] = 'my_tsf_custom_event_image_generator';
		}
	}

	// Return the modified parameters with the custom image generator callback.
	return $params;
}

/**
 * Custom generator to yield the social image URL for 'event' posts.
 *
 * This function acts as a generator to provide the social image URL specifically for the
 * 'event' custom post type. It retrieves the image from the ACF field 'branding' associated
 * with the given post. If no valid image is found, it yields a fallback with an empty URL.
 *
 * The generator pattern is used here to allow asynchronous processing of image retrieval
 * in the SEO framework. The yielded result includes both the image URL and its ID (if available).
 *
 * @generator
 *
 * @param array|null $args Optional. The query arguments, including the post ID ('id').
 *                         If null, the post ID will be fetched dynamically.
 * @param string $size Optional. The image size to retrieve. Default is 'full'.
 *
 * @yield array An associative array containing:
 *              - 'url' (string) The social image URL, or an empty string if not found.
 *              - 'id' (int) The image ID, if available, otherwise 0.
 */
function my_tsf_custom_event_image_generator( array $args = null, string $size = 'full' ): Generator {
	// Get the post ID from the query arguments or the current query if not provided.
	$post_id = $args['id'] ?? tsf()->query()->get_the_real_id();

	// Ensure ACF is available before attempting to retrieve the 'branding' field.
	if ( function_exists( 'get_field' ) ) {
		// Retrieve the URL from the 'branding' ACF field associated with the event post.
		$branding_image_url = get_field( 'branding', $post_id );

		// If a valid URL is found, yield it with a default image ID of 0.
		if ( ! empty( $branding_image_url ) ) {
			yield [
				'url' => esc_url( $branding_image_url ),
				'id'  => 0, // Optionally, you can set the image ID if applicable.
			];
		}
	}

	// If no image was found, yield a fallback with an empty URL and an image ID of 0.
	yield [
		'url' => '',
		'id'  => 0,
	];
}


/**
 * Generates a custom meta description for the 'message' post type.
 *
 * This function pulls the content from the ACF field 'content' on a single 'message' post.
 * It then strips HTML tags and sanitizes the content to create a clean meta description.
 * If the content exceeds 159 characters, it trims the description and appends an ellipsis.
 * If no content is found, it returns the original description.
 *
 * @param string $desc The existing generated description from The SEO Framework.
 * @param array|null $args The query arguments. Contains 'id', 'tax', 'pta', and 'uid'.
 *
 * @return string The modified meta description based on the 'content' ACF field, or the original description if no content is available.
 */
function generate_message_meta_description( string $desc, ?array $args ): string {
	// Check if we are on a singular 'message' post type.
	if ( 'message' === get_post_type() ) {
		// Ensure ACF is available before attempting to retrieve the field.
		if ( function_exists( 'get_field' ) ) {
			// Get the 'content' field value from ACF.
			$content = get_field( 'content' );

			// If content exists, sanitize and trim it for the meta description.
			if ( ! empty( $content ) ) {
				$cleaned_content = wp_strip_all_tags( $content );
				$desc            = strlen( $cleaned_content ) > 159 ? substr( $cleaned_content, 0, 156 ) . '...' : $cleaned_content;
			}
		}
	}

	// Return the modified description or the original if no content was found.
	return $desc;
}


/**
 * Generates a custom meta title for the 'message' post type.
 *
 * This function retrieves the content from the ACF field 'title' on a single 'message' post.
 * It sanitizes the title to ensure no HTML tags are present.
 * If no custom title is found, it returns the existing generated title.
 *
 * @param string $title The existing generated title from The SEO Framework.
 * @param array|null $args The query arguments. Contains 'id', 'tax', 'pta', and 'uid'.
 *
 * @return string The modified meta title based on the 'title' ACF field, or the original title if no custom title is available.
 */
function generate_message_meta_title( string $title, ?array $args ): string {
	// Check if we are on a singular 'message' post type.
	if ( 'message' === get_post_type() ) {
		// Ensure ACF is available before attempting to retrieve the field.
		if ( function_exists( 'get_field' ) ) {
			// Get the 'title' field value from ACF.
			$custom_title = get_field( 'title' );

			// If a custom title exists, sanitize and use it as the meta title.
			if ( ! empty( $custom_title ) ) {
				$title = wp_strip_all_tags( $custom_title );
			}
		}
	}

	// Return the modified title or the original if no custom title was found.
	return $title;
}


add_filter( 'the_seo_framework_generated_description', 'my_tsf_generated_description', 10, 2 );

/**
 * Generates a custom meta description for 'message' post types.
 *
 * This function checks if ACF is activated and retrieves the relevant
 * post or term information based on the provided arguments. If the post
 * type is 'message', it constructs a dynamic meta description that
 * includes the speaker, series, and date of the message.
 *
 * @param string $desc The existing generated description.
 * @param array|null $args The query arguments. Contains 'id', 'tax', 'pta', and 'uid'.
 *                         Is null when the query is auto-determined.
 *
 * @return string The overwritten description or the original if not applicable.
 */
function my_tsf_generated_description( string $desc, ?array $args ): string {

	// Check if ACF is activated
	if ( ! function_exists( 'get_field' ) ) {
		return $desc;
	}

	// Initialize variables for post_id or term.
	$post_id = null;
	$term    = null;

	if ( isset( $args ) ) {
		// Admin area.
		switch ( The_SEO_Framework\get_query_type_from_args( $args ) ) {
			case 'term':
				$term = get_term( $args['id'], $args['tax'] );
				break;
			case 'single':
				$post_id = $args['id'];
				break;
		}
	} else {
		// On the front-end.
		$tsfquery = tsf()->query();

		if ( $tsfquery->is_editable_term() ) {
			$term = get_queried_object();
		} elseif ( $tsfquery->is_singular() ) {
			$post_id = $tsfquery->get_the_real_id();
		}
	}

	// If this is a 'message' post type, generate a dynamic description.
	if ( ! empty( $post_id ) && get_post_type( $post_id ) === 'message' ) {
		// Get speaker and series terms cleanly without HTML.
		$speaker = bootcamp_get_message_term_name( $post_id, 'speaker' );
		$series  = bootcamp_get_message_term_name( $post_id, 'series' );
		$date    = get_the_date( 'F j, Y', $post_id );

		// Construct the meta description
		$desc = "On Sunday, $date, $speaker preached a message from our series \"$series\" at Foothills Church's Maryville Location.";
	}

	return $desc;
}

/**
 * Helper function to retrieve taxonomy term names without HTML.
 *
 * This function fetches the terms associated with a given post ID and taxonomy.
 * It returns a comma-separated list of term names, stripped of any HTML.
 *
 * @param int $post_id The ID of the post for which to retrieve the taxonomy terms.
 * @param string $taxonomy The taxonomy from which to fetch terms (e.g., 'speaker', 'series').
 *
 * @return string A comma-separated list of term names. Returns an empty string if no terms are found.
 */
function bootcamp_get_message_term_name( int $post_id, string $taxonomy ): string {
	$terms = get_the_terms( $post_id, $taxonomy );

	if ( $terms && ! is_wp_error( $terms ) ) {
		// Get an array of term names
		$term_names = wp_list_pluck( $terms, 'name' );

		// Return the names as a comma-separated list (if there are multiple terms)
		return implode( ', ', $term_names );
	}

	return ''; // Return empty string if no terms found
}

